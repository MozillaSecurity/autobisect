TESTING SPIDERMONKEY

Bugs in SpiderMonkey found with this fuzzer are tracked by https://bugzilla.mozilla.org/show_bug.cgi?id=349611.

Fuzz and compare optimization modes:
  ~/fuzzing/js/loopjsfunfuzz.py --random-flags --comparejit 12 mozilla-central $tmd
Fuzz with Valgrind: (must build with --enable-valgrind. opt build recommended.)
  ~/fuzzing/js/loopjsfunfuzz.py --valgrind 60 mozilla-central $tmd -m -n
Fuzz xpcshell:
  ~/fuzzing/js/loopjsfunfuzz.py 20 mozilla-central xpcshell -m

For maximum coverage, test spidermonkey with multiple C++ compiler modes <http://blog.mozilla.com/nnethercote/2009/11/18/nanojit-test-coverage/> and multiple JS engine modes.

Hints for building spidermonkey:
  http://developer.mozilla.org/en/docs/SpiderMonkey_Build_Documentation
  Spidermonkey shell                        make -j2 -f Makefile.ref
  Spidermonkey shell without assertions     make -j2 BUILD_OPT=1 -f Makefile.ref



TESTING JAVASCRIPTCORE

Bugs in JavaScriptCore found with this fuzzer are tracked by http://bugs.webkit.org/show_bug.cgi?id=13638.


Recommended command line:
  python -u ~/fuzzing/jsfunfuzz/multi_timed_run.py 300 jscore ./jscore

Hints for building testkjs:
  http://webkit.org/building/checkout.html
  |make release| or |make debug| in WebKit/JavaScriptCore/

  The shell will be a file called jsc in WebKit/WebKitBuild/Release/ or WebKit/WebKitBuild/Debug/.


TESTING V8

Bugs in V8 found with this fuzzer are tracked by <not yet set up>.


Recommended command line:
  python -u ~/fuzzing/jsfunfuzz/multi_timed_run.py 300 v8 ./shell_g

Hints for building v8:
  http://code.google.com/apis/v8/build.html
  |scons mode=release library=static snapshot=on sample=shell| or
  |scons mode=debug library=shared snapshot=on sample=shell| in v8/

  The shell will be a file called shell or shell_g (debug) in v8/


TESTING WEB BROWSERS

Load jsfunfuzz.html in a web browser.  For Firefox, you might need to set the <script>'s type attribute.


LANGUAGE REFERENCES

http://www.codehouse.com/javascript/precedence/
http://www.ecma-international.org/publications/standards/Ecma-262.htm
http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference
http://developer.mozilla.org/en/docs/New_in_JavaScript_1.6
http://developer.mozilla.org/en/docs/New_in_JavaScript_1.7
http://developer.mozilla.org/en/docs/New_in_JavaScript_1.8
http://www.ecmascript.org/


USING STARTJSFUNFUZZ

Make use of startjsfunfuzz.py to start fuzzing.

(Assumes ~/tracemonkey/ to be present, for TM.)

Recommended command line:
  date && time python startjsfunfuzz.py 32 dbg tm

Tips:
  On Linux, make sure /proc/sys/fs/file-max has a minimum value of around 150k - 200k. ARM Tegras tend to lock up with a value of 90k.
  Edit /etc/sysctl.conf with your favourite editor and add/change to contain the line `fs.file-max=200000`.
  Run `sysctl -p` to apply changes.
  Also, edit /etc/security/limits.conf and uncomment and set the soft limit of users dumping core files to the maximum system hard limit.
